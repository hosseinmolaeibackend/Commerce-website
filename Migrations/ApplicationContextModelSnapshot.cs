// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.Context;

#nullable disable

namespace Test.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Test.Models.Article.ArticleModel", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeRead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleModels");
                });

            modelBuilder.Entity("Test.Models.Comment.CommentArticleModel", b =>
                {
                    b.Property<int>("CommentArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentArticleId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CommentArticleBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentArticleId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentArticleModels");
                });

            modelBuilder.Entity("Test.Models.Comment.CommentModel", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentProductBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentModels");
                });

            modelBuilder.Entity("Test.Models.Comment.CommentQsModel", b =>
                {
                    b.Property<int>("CommentQsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentQsId"));

                    b.Property<string>("CommentQsBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QsId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentQsId");

                    b.HasIndex("QsId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentQsModels");
                });

            modelBuilder.Entity("Test.Models.Image.GalleriesModel", b =>
                {
                    b.Property<int>("GalleriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GalleriesId"));

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("GalleriesId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("GalleriesModels");
                });

            modelBuilder.Entity("Test.Models.Image.ImageModel", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("ImageModels");
                });

            modelBuilder.Entity("Test.Models.Like.LikeArticleModel", b =>
                {
                    b.Property<int>("LikeArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeArticleId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeArticleId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeArticleModels");
                });

            modelBuilder.Entity("Test.Models.Like.LikeCommentArticleModel", b =>
                {
                    b.Property<int>("LikeCommentArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeCommentArticleId"));

                    b.Property<int>("CommentArticleId")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeCommentArticleId");

                    b.HasIndex("CommentArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeCommentArticleModels");
                });

            modelBuilder.Entity("Test.Models.Like.LikeCommentModel", b =>
                {
                    b.Property<int>("LikeProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeProductId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeProductId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeCommentModels");
                });

            modelBuilder.Entity("Test.Models.Like.LikeProductModel", b =>
                {
                    b.Property<int>("LikeProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeProductId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeProductModels");
                });

            modelBuilder.Entity("Test.Models.Like.LikeQsCommentModel", b =>
                {
                    b.Property<int>("LikeQsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeQsId"));

                    b.Property<int>("CommentQsId")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeQsId");

                    b.HasIndex("CommentQsId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeQsCommentModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeQsModel", b =>
                {
                    b.Property<int>("LikeQsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeQsId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("QsId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeQsId");

                    b.HasIndex("QsId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeQsModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeReplyCommentArticleModel", b =>
                {
                    b.Property<int>("LikeReplyCommentArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeReplyCommentArticleId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCommentArticleId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCommentArticleModelReplyCommentArticleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeReplyCommentArticleId");

                    b.HasIndex("ReplyCommentArticleModelReplyCommentArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeReplyCommentArticleModels");
                });

            modelBuilder.Entity("Test.Models.Like.LikeReplyCommentProductModel", b =>
                {
                    b.Property<int>("LikeReplyCommentProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeReplyCommentProductId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCommentId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCommentModelReplyCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeReplyCommentProductId");

                    b.HasIndex("ReplyCommentModelReplyCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeReplyCommentProductModels");
                });

            modelBuilder.Entity("Test.Models.Like.LikeReplyCommentQsModel", b =>
                {
                    b.Property<int>("LikeReplyCommentQsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeReplyCommentQsId"));

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCommentQsId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeReplyCommentQsId");

                    b.HasIndex("ReplyCommentQsId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeReplyCommentQsModel");
                });

            modelBuilder.Entity("Test.Models.Product.ProductCatagoryModel", b =>
                {
                    b.Property<int>("CatagoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatagoryId"));

                    b.Property<string>("CatagoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatagoryId");

                    b.ToTable("ProductCatagoryModels");
                });

            modelBuilder.Entity("Test.Models.Product.ProductCatagorySelectedModel", b =>
                {
                    b.Property<int>("ProductCatagorySelectedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCatagorySelectedId"));

                    b.Property<int>("CatagoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductCatagorySelectedId");

                    b.HasIndex("CatagoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCatagorySelectedModels");
                });

            modelBuilder.Entity("Test.Models.Product.ProductModel", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductModels");
                });

            modelBuilder.Entity("Test.Models.Qs.QsCategoryModel", b =>
                {
                    b.Property<int>("QsCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QsCategoryId"));

                    b.Property<string>("CategoryTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QsCategoryId");

                    b.ToTable("QsCategoryModels");
                });

            modelBuilder.Entity("Test.Models.Qs.QsCategorySelectedModel", b =>
                {
                    b.Property<int>("QsCategorySelectedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QsCategorySelectedId"));

                    b.Property<int>("QsCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("QsCategoryModelQsCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("QsId")
                        .HasColumnType("int");

                    b.Property<int>("QsModelQsId")
                        .HasColumnType("int");

                    b.HasKey("QsCategorySelectedId");

                    b.HasIndex("QsCategoryModelQsCategoryId");

                    b.HasIndex("QsModelQsId");

                    b.ToTable("QsCategorySelectedModels");
                });

            modelBuilder.Entity("Test.Models.Qs.QsModel", b =>
                {
                    b.Property<int>("QsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QsId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("QsId");

                    b.HasIndex("UserId");

                    b.ToTable("QsModels");
                });

            modelBuilder.Entity("Test.Models.ReplyComment.ReplyCommentArticleModel", b =>
                {
                    b.Property<int>("ReplyCommentArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyCommentArticleId"));

                    b.Property<int>("CommentArticleId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyCommentArticleText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReplyCommentArticleId");

                    b.HasIndex("CommentArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("ReplyCommentArticleModels");
                });

            modelBuilder.Entity("Test.Models.ReplyComment.ReplyCommentModel", b =>
                {
                    b.Property<int>("ReplyCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyCommentId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyCommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReplyCommentId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ReplyCommentModels");
                });

            modelBuilder.Entity("Test.Models.ReplyComment.ReplyCommentQsModel", b =>
                {
                    b.Property<int>("ReplyCommentQsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyCommentQsId"));

                    b.Property<int>("CommentQsId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyCommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReplyCommentQsId");

                    b.HasIndex("CommentQsId");

                    b.HasIndex("UserId");

                    b.ToTable("ReplyCommentQsModels");
                });

            modelBuilder.Entity("Test.Models.User.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profilimg")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserModels");
                });

            modelBuilder.Entity("Test.Models.Article.ArticleModel", b =>
                {
                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("ArticleModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Comment.CommentArticleModel", b =>
                {
                    b.HasOne("Test.Models.Article.ArticleModel", "ArticleModel")
                        .WithMany("CommentArticleModels")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("CommentArticleModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArticleModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Comment.CommentModel", b =>
                {
                    b.HasOne("Test.Models.Product.ProductModel", "ProductModel")
                        .WithMany("commentModels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("CommentModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Comment.CommentQsModel", b =>
                {
                    b.HasOne("Test.Models.Qs.QsModel", "QsModel")
                        .WithMany("CommentQsModels")
                        .HasForeignKey("QsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("CommentQsModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QsModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Image.GalleriesModel", b =>
                {
                    b.HasOne("Test.Models.Image.ImageModel", "ImageModel")
                        .WithMany("GalleriesModels")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.Product.ProductModel", "ProductModel")
                        .WithMany("GalleriesModels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ImageModel");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeArticleModel", b =>
                {
                    b.HasOne("Test.Models.Article.ArticleModel", "ArticleModel")
                        .WithMany("LikeArticleModels")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("LikeArticleModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArticleModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeCommentArticleModel", b =>
                {
                    b.HasOne("Test.Models.Comment.CommentArticleModel", "CommentArticleModel")
                        .WithMany("LikeCommentArticleModels")
                        .HasForeignKey("CommentArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("LikeCommentArticleModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommentArticleModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeCommentModel", b =>
                {
                    b.HasOne("Test.Models.Comment.CommentModel", "CommentModel")
                        .WithMany("LikeCommentModels")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("LikeCommentModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommentModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeProductModel", b =>
                {
                    b.HasOne("Test.Models.Product.ProductModel", "ProductModel")
                        .WithMany("LikeProductModels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("LikeProductModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeQsCommentModel", b =>
                {
                    b.HasOne("Test.Models.Comment.CommentQsModel", "CommentQsModel")
                        .WithMany("LikeQsCommentModels")
                        .HasForeignKey("CommentQsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("LikeQsCommentModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommentQsModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeQsModel", b =>
                {
                    b.HasOne("Test.Models.Qs.QsModel", "QsModel")
                        .WithMany("LikeQsModels")
                        .HasForeignKey("QsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("LikeQsModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QsModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeReplyCommentArticleModel", b =>
                {
                    b.HasOne("Test.Models.ReplyComment.ReplyCommentArticleModel", "ReplyCommentArticleModel")
                        .WithMany()
                        .HasForeignKey("ReplyCommentArticleModelReplyCommentArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("LikeReplyCommentArticleModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReplyCommentArticleModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeReplyCommentProductModel", b =>
                {
                    b.HasOne("Test.Models.ReplyComment.ReplyCommentModel", "ReplyCommentModel")
                        .WithMany("LikeReplyCommentProductModels")
                        .HasForeignKey("ReplyCommentModelReplyCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("LikeReplyCommentProductModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReplyCommentModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Like.LikeReplyCommentQsModel", b =>
                {
                    b.HasOne("Test.Models.ReplyComment.ReplyCommentQsModel", "ReplyCommentQsModel")
                        .WithMany("LikeReplyCommentQsModels")
                        .HasForeignKey("ReplyCommentQsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("LikeReplyCommentQsModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReplyCommentQsModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Product.ProductCatagorySelectedModel", b =>
                {
                    b.HasOne("Test.Models.Product.ProductCatagoryModel", "ProductCatagoryModel")
                        .WithMany("ProductCatagorySelectedModels")
                        .HasForeignKey("CatagoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.Product.ProductModel", "ProductModel")
                        .WithMany("ProductCatagorySelectedModels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductCatagoryModel");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("Test.Models.Product.ProductModel", b =>
                {
                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("ProductModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Qs.QsCategorySelectedModel", b =>
                {
                    b.HasOne("Test.Models.Qs.QsCategoryModel", "QsCategoryModel")
                        .WithMany("QsCategorySelectedModels")
                        .HasForeignKey("QsCategoryModelQsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Models.Qs.QsModel", "QsModel")
                        .WithMany("QsCategorySelectedModels")
                        .HasForeignKey("QsModelQsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QsCategoryModel");

                    b.Navigation("QsModel");
                });

            modelBuilder.Entity("Test.Models.Qs.QsModel", b =>
                {
                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("QsModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.ReplyComment.ReplyCommentArticleModel", b =>
                {
                    b.HasOne("Test.Models.Comment.CommentArticleModel", "CommentArticleModel")
                        .WithMany("ReplyCommentArticleModels")
                        .HasForeignKey("CommentArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("ReplyCommentArticleModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommentArticleModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.ReplyComment.ReplyCommentModel", b =>
                {
                    b.HasOne("Test.Models.Comment.CommentModel", "CommentModel")
                        .WithMany("ReplyCommentModels")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("ReplyCommentModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommentModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.ReplyComment.ReplyCommentQsModel", b =>
                {
                    b.HasOne("Test.Models.Comment.CommentQsModel", "CommentQsModel")
                        .WithMany("ReplyCommentQsModels")
                        .HasForeignKey("CommentQsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Test.Models.User.UserModel", "UserModel")
                        .WithMany("ReplyCommentQsModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CommentQsModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("Test.Models.Article.ArticleModel", b =>
                {
                    b.Navigation("CommentArticleModels");

                    b.Navigation("LikeArticleModels");
                });

            modelBuilder.Entity("Test.Models.Comment.CommentArticleModel", b =>
                {
                    b.Navigation("LikeCommentArticleModels");

                    b.Navigation("ReplyCommentArticleModels");
                });

            modelBuilder.Entity("Test.Models.Comment.CommentModel", b =>
                {
                    b.Navigation("LikeCommentModels");

                    b.Navigation("ReplyCommentModels");
                });

            modelBuilder.Entity("Test.Models.Comment.CommentQsModel", b =>
                {
                    b.Navigation("LikeQsCommentModels");

                    b.Navigation("ReplyCommentQsModels");
                });

            modelBuilder.Entity("Test.Models.Image.ImageModel", b =>
                {
                    b.Navigation("GalleriesModels");
                });

            modelBuilder.Entity("Test.Models.Product.ProductCatagoryModel", b =>
                {
                    b.Navigation("ProductCatagorySelectedModels");
                });

            modelBuilder.Entity("Test.Models.Product.ProductModel", b =>
                {
                    b.Navigation("GalleriesModels");

                    b.Navigation("LikeProductModels");

                    b.Navigation("ProductCatagorySelectedModels");

                    b.Navigation("commentModels");
                });

            modelBuilder.Entity("Test.Models.Qs.QsCategoryModel", b =>
                {
                    b.Navigation("QsCategorySelectedModels");
                });

            modelBuilder.Entity("Test.Models.Qs.QsModel", b =>
                {
                    b.Navigation("CommentQsModels");

                    b.Navigation("LikeQsModels");

                    b.Navigation("QsCategorySelectedModels");
                });

            modelBuilder.Entity("Test.Models.ReplyComment.ReplyCommentModel", b =>
                {
                    b.Navigation("LikeReplyCommentProductModels");
                });

            modelBuilder.Entity("Test.Models.ReplyComment.ReplyCommentQsModel", b =>
                {
                    b.Navigation("LikeReplyCommentQsModels");
                });

            modelBuilder.Entity("Test.Models.User.UserModel", b =>
                {
                    b.Navigation("ArticleModels");

                    b.Navigation("CommentArticleModels");

                    b.Navigation("CommentModels");

                    b.Navigation("CommentQsModels");

                    b.Navigation("LikeArticleModels");

                    b.Navigation("LikeCommentArticleModels");

                    b.Navigation("LikeCommentModels");

                    b.Navigation("LikeProductModels");

                    b.Navigation("LikeQsCommentModels");

                    b.Navigation("LikeQsModels");

                    b.Navigation("LikeReplyCommentArticleModels");

                    b.Navigation("LikeReplyCommentProductModels");

                    b.Navigation("LikeReplyCommentQsModels");

                    b.Navigation("ProductModels");

                    b.Navigation("QsModels");

                    b.Navigation("ReplyCommentArticleModels");

                    b.Navigation("ReplyCommentModels");

                    b.Navigation("ReplyCommentQsModels");
                });
#pragma warning restore 612, 618
        }
    }
}
